name: fd

services:
  traefik:
    image: "traefik:v3.5"
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    
    depends_on:
      app:
        condition: service_healthy
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./dynamic:/dynamic:ro


    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Providers 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/dynamic" 

      # API & Dashboard 
      - "--api.dashboard=true"
      - "--api.insecure=false"

    labels:
      # Enable selfâ€‘routing
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`dash.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

  redis:
    restart: always
    image: redis:8.0.3
    container_name: redis
    command: redis-server --requirepass $REDIS_PASSWORD
    environment:
      - REDISCLI_AUTH=$REDIS_PASSWORD
    ports:
      - "${EXPOSE_REDIS_PORT:-}:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli PING | grep PONG || (redis-cli PING && exit 1)" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - redis_data:/data

  postgres:
    restart: always
    image: postgres:16.3
    container_name: postgres
    environment:
      - POSTGRES_DB=$DB_DATABASE
      - POSTGRES_USER=$DB_USERNAME
      - POSTGRES_PASSWORD=$DB_PASSWORD
    ports:
      - "${EXPOSE_POSTGRES_PORT:-}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - postgres_data:/var/lib/postgresql/data

  app:
    image: cosmtrek/air
    container_name: app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.services.app.loadbalancer.server.port=${PORT}"

    working_dir: /src
    env_file: .env
    environment:
      # Use Go version specified in the go.mod, not the local one
      - GOTOOLCHAIN=auto
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./bin:/src/bin
      - ./cmd:/src/cmd
      - ./internal:/src/internal
      - ./web:/src/web
      - ./go.mod:/src/go.mod
      - ./go.sum:/src/go.sum
      - ./Makefile:/src/Makefile
      - ./.air.toml:/src/.air.toml

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/healthcheck"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    image: golang:1.25.1-alpine
    container_name: worker
    command: tail -f /dev/null
    env_file: .env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./bin:/src/bin
    depends_on:
      postgres:
        condition: service_healthy

  backup:
    image: golang:1.25.1-alpine
    container_name: backup
    command: [ "sh", "-c", "apk update && apk add postgresql16-client && tail -f /dev/null" ]
    env_file: .env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./bin:/src/bin
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  redis_data:
  postgres_data:
